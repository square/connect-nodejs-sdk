/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.0-SNAPSHOT
 *
 */
var ApiClient = require('../ApiClient');
var V1AdjustInventoryRequest = require('../model/V1AdjustInventoryRequest');
var V1Category = require('../model/V1Category');
var V1Discount = require('../model/V1Discount');
var V1Fee = require('../model/V1Fee');
var V1InventoryEntry = require('../model/V1InventoryEntry');
var V1Item = require('../model/V1Item');
var V1ModifierList = require('../model/V1ModifierList');
var V1ModifierOption = require('../model/V1ModifierOption');
var V1Page = require('../model/V1Page');
var V1PageCell = require('../model/V1PageCell');
var V1UpdateModifierListRequest = require('../model/V1UpdateModifierListRequest');
var V1Variation = require('../model/V1Variation');

/**
 * V1Items service.
 * @module api/V1ItemsApi
 */

/**
 * Constructs a new V1ItemsApi. 
 * @alias module:api/V1ItemsApi
 * @class
 * @param {module:ApiClient} apiClient Optional API client implementation to use,
 * default to {@link module:ApiClient#instance} if unspecified.
 */
module.exports = function(apiClient) {
  this.apiClient = apiClient || ApiClient.instance;



  /**
   * AdjustInventory
   * Adjusts an item variation&#39;s current available inventory.
   * @param {String} locationId The ID of the item&#39;s associated location.
   * @param {String} variationId The ID of the variation to adjust inventory information for.
   * @param {module:model/V1AdjustInventoryRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/V1InventoryEntry} and HTTP response
   */
  this.adjustInventoryWithHttpInfo = function(locationId, variationId, body) {
    var postBody = body;

    // verify the required parameter 'locationId' is set
    if (locationId === undefined || locationId === null) {
      throw new Error("Missing the required parameter 'locationId' when calling adjustInventory");
    }

    // verify the required parameter 'variationId' is set
    if (variationId === undefined || variationId === null) {
      throw new Error("Missing the required parameter 'variationId' when calling adjustInventory");
    }

    // verify the required parameter 'body' is set
    if (body === undefined || body === null) {
      throw new Error("Missing the required parameter 'body' when calling adjustInventory");
    }


    var pathParams = {
      'location_id': locationId,
      'variation_id': variationId
    };
    var queryParams = {
    };
    var headerParams = {
    };
    headerParams['Square-Version'] = '2019-08-14';

    var formParams = {
    };

    var authNames = ['oauth2'];
    var contentTypes = ['application/json'];
    var accepts = ['application/json'];
    var returnType = V1InventoryEntry;

    return this.apiClient.callApi(
      '/v1/{location_id}/inventory/{variation_id}', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );
  }

  /**
   * AdjustInventory
   * Adjusts an item variation&#39;s current available inventory.
   * @param {String} locationId The ID of the item&#39;s associated location.
   * @param {String} variationId The ID of the variation to adjust inventory information for.
   * @param {module:model/V1AdjustInventoryRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/V1InventoryEntry}
   */
  this.adjustInventory = function(locationId, variationId, body) {
    return this.adjustInventoryWithHttpInfo(locationId, variationId, body)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }


  /**
   * ApplyFee
   * Associates a fee with an item, meaning the fee is automatically applied to the item in Square Register.
   * @param {String} locationId The ID of the fee&#39;s associated location.
   * @param {String} itemId The ID of the item to add the fee to.
   * @param {String} feeId The ID of the fee to apply.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/V1Item} and HTTP response
   */
  this.applyFeeWithHttpInfo = function(locationId, itemId, feeId) {
    var postBody = null;

    // verify the required parameter 'locationId' is set
    if (locationId === undefined || locationId === null) {
      throw new Error("Missing the required parameter 'locationId' when calling applyFee");
    }

    // verify the required parameter 'itemId' is set
    if (itemId === undefined || itemId === null) {
      throw new Error("Missing the required parameter 'itemId' when calling applyFee");
    }

    // verify the required parameter 'feeId' is set
    if (feeId === undefined || feeId === null) {
      throw new Error("Missing the required parameter 'feeId' when calling applyFee");
    }


    var pathParams = {
      'location_id': locationId,
      'item_id': itemId,
      'fee_id': feeId
    };
    var queryParams = {
    };
    var headerParams = {
    };
    headerParams['Square-Version'] = '2019-08-14';

    var formParams = {
    };

    var authNames = ['oauth2'];
    var contentTypes = ['application/json'];
    var accepts = ['application/json'];
    var returnType = V1Item;

    return this.apiClient.callApi(
      '/v1/{location_id}/items/{item_id}/fees/{fee_id}', 'PUT',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );
  }

  /**
   * ApplyFee
   * Associates a fee with an item, meaning the fee is automatically applied to the item in Square Register.
   * @param {String} locationId The ID of the fee&#39;s associated location.
   * @param {String} itemId The ID of the item to add the fee to.
   * @param {String} feeId The ID of the fee to apply.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/V1Item}
   */
  this.applyFee = function(locationId, itemId, feeId) {
    return this.applyFeeWithHttpInfo(locationId, itemId, feeId)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }


  /**
   * ApplyModifierList
   * Associates a modifier list with an item, meaning modifier options from the list can be applied to the item.
   * @param {String} locationId The ID of the item&#39;s associated location.
   * @param {String} modifierListId The ID of the modifier list to apply.
   * @param {String} itemId The ID of the item to add the modifier list to.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/V1Item} and HTTP response
   */
  this.applyModifierListWithHttpInfo = function(locationId, modifierListId, itemId) {
    var postBody = null;

    // verify the required parameter 'locationId' is set
    if (locationId === undefined || locationId === null) {
      throw new Error("Missing the required parameter 'locationId' when calling applyModifierList");
    }

    // verify the required parameter 'modifierListId' is set
    if (modifierListId === undefined || modifierListId === null) {
      throw new Error("Missing the required parameter 'modifierListId' when calling applyModifierList");
    }

    // verify the required parameter 'itemId' is set
    if (itemId === undefined || itemId === null) {
      throw new Error("Missing the required parameter 'itemId' when calling applyModifierList");
    }


    var pathParams = {
      'location_id': locationId,
      'modifier_list_id': modifierListId,
      'item_id': itemId
    };
    var queryParams = {
    };
    var headerParams = {
    };
    headerParams['Square-Version'] = '2019-08-14';

    var formParams = {
    };

    var authNames = ['oauth2'];
    var contentTypes = ['application/json'];
    var accepts = ['application/json'];
    var returnType = V1Item;

    return this.apiClient.callApi(
      '/v1/{location_id}/items/{item_id}/modifier-lists/{modifier_list_id}', 'PUT',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );
  }

  /**
   * ApplyModifierList
   * Associates a modifier list with an item, meaning modifier options from the list can be applied to the item.
   * @param {String} locationId The ID of the item&#39;s associated location.
   * @param {String} modifierListId The ID of the modifier list to apply.
   * @param {String} itemId The ID of the item to add the modifier list to.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/V1Item}
   */
  this.applyModifierList = function(locationId, modifierListId, itemId) {
    return this.applyModifierListWithHttpInfo(locationId, modifierListId, itemId)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }


  /**
   * CreateCategory
   * Creates an item category.
   * @param {String} locationId The ID of the location to create an item for.
   * @param {module:model/V1Category} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/V1Category} and HTTP response
   */
  this.createCategoryWithHttpInfo = function(locationId, body) {
    var postBody = body;

    // verify the required parameter 'locationId' is set
    if (locationId === undefined || locationId === null) {
      throw new Error("Missing the required parameter 'locationId' when calling createCategory");
    }

    // verify the required parameter 'body' is set
    if (body === undefined || body === null) {
      throw new Error("Missing the required parameter 'body' when calling createCategory");
    }


    var pathParams = {
      'location_id': locationId
    };
    var queryParams = {
    };
    var headerParams = {
    };
    headerParams['Square-Version'] = '2019-08-14';

    var formParams = {
    };

    var authNames = ['oauth2'];
    var contentTypes = ['application/json'];
    var accepts = ['application/json'];
    var returnType = V1Category;

    return this.apiClient.callApi(
      '/v1/{location_id}/categories', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );
  }

  /**
   * CreateCategory
   * Creates an item category.
   * @param {String} locationId The ID of the location to create an item for.
   * @param {module:model/V1Category} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/V1Category}
   */
  this.createCategory = function(locationId, body) {
    return this.createCategoryWithHttpInfo(locationId, body)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }


  /**
   * CreateDiscount
   * Creates a discount.
   * @param {String} locationId The ID of the location to create an item for.
   * @param {module:model/V1Discount} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/V1Discount} and HTTP response
   */
  this.createDiscountWithHttpInfo = function(locationId, body) {
    var postBody = body;

    // verify the required parameter 'locationId' is set
    if (locationId === undefined || locationId === null) {
      throw new Error("Missing the required parameter 'locationId' when calling createDiscount");
    }

    // verify the required parameter 'body' is set
    if (body === undefined || body === null) {
      throw new Error("Missing the required parameter 'body' when calling createDiscount");
    }


    var pathParams = {
      'location_id': locationId
    };
    var queryParams = {
    };
    var headerParams = {
    };
    headerParams['Square-Version'] = '2019-08-14';

    var formParams = {
    };

    var authNames = ['oauth2'];
    var contentTypes = ['application/json'];
    var accepts = ['application/json'];
    var returnType = V1Discount;

    return this.apiClient.callApi(
      '/v1/{location_id}/discounts', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );
  }

  /**
   * CreateDiscount
   * Creates a discount.
   * @param {String} locationId The ID of the location to create an item for.
   * @param {module:model/V1Discount} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/V1Discount}
   */
  this.createDiscount = function(locationId, body) {
    return this.createDiscountWithHttpInfo(locationId, body)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }


  /**
   * CreateFee
   * Creates a fee (tax).
   * @param {String} locationId The ID of the location to create a fee for.
   * @param {module:model/V1Fee} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/V1Fee} and HTTP response
   */
  this.createFeeWithHttpInfo = function(locationId, body) {
    var postBody = body;

    // verify the required parameter 'locationId' is set
    if (locationId === undefined || locationId === null) {
      throw new Error("Missing the required parameter 'locationId' when calling createFee");
    }

    // verify the required parameter 'body' is set
    if (body === undefined || body === null) {
      throw new Error("Missing the required parameter 'body' when calling createFee");
    }


    var pathParams = {
      'location_id': locationId
    };
    var queryParams = {
    };
    var headerParams = {
    };
    headerParams['Square-Version'] = '2019-08-14';

    var formParams = {
    };

    var authNames = ['oauth2'];
    var contentTypes = ['application/json'];
    var accepts = ['application/json'];
    var returnType = V1Fee;

    return this.apiClient.callApi(
      '/v1/{location_id}/fees', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );
  }

  /**
   * CreateFee
   * Creates a fee (tax).
   * @param {String} locationId The ID of the location to create a fee for.
   * @param {module:model/V1Fee} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/V1Fee}
   */
  this.createFee = function(locationId, body) {
    return this.createFeeWithHttpInfo(locationId, body)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }


  /**
   * CreateItem
   * Creates an item and at least one variation for it. Item-related entities include fields you can use to associate them with entities in a non-Square system.  When you create an item-related entity, you can optionally specify its &#x60;id&#x60;. This value must be unique among all IDs ever specified for the account, including those specified by other applications. You can never reuse an entity ID. If you do not specify an ID, Square generates one for the entity.  Item variations have a &#x60;user_data&#x60; string that lets you associate arbitrary metadata with the variation. The string cannot exceed 255 characters.
   * @param {String} locationId The ID of the location to create an item for.
   * @param {module:model/V1Item} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/V1Item} and HTTP response
   */
  this.createItemWithHttpInfo = function(locationId, body) {
    var postBody = body;

    // verify the required parameter 'locationId' is set
    if (locationId === undefined || locationId === null) {
      throw new Error("Missing the required parameter 'locationId' when calling createItem");
    }

    // verify the required parameter 'body' is set
    if (body === undefined || body === null) {
      throw new Error("Missing the required parameter 'body' when calling createItem");
    }


    var pathParams = {
      'location_id': locationId
    };
    var queryParams = {
    };
    var headerParams = {
    };
    headerParams['Square-Version'] = '2019-08-14';

    var formParams = {
    };

    var authNames = ['oauth2'];
    var contentTypes = ['application/json'];
    var accepts = ['application/json'];
    var returnType = V1Item;

    return this.apiClient.callApi(
      '/v1/{location_id}/items', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );
  }

  /**
   * CreateItem
   * Creates an item and at least one variation for it. Item-related entities include fields you can use to associate them with entities in a non-Square system.  When you create an item-related entity, you can optionally specify its &#x60;id&#x60;. This value must be unique among all IDs ever specified for the account, including those specified by other applications. You can never reuse an entity ID. If you do not specify an ID, Square generates one for the entity.  Item variations have a &#x60;user_data&#x60; string that lets you associate arbitrary metadata with the variation. The string cannot exceed 255 characters.
   * @param {String} locationId The ID of the location to create an item for.
   * @param {module:model/V1Item} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/V1Item}
   */
  this.createItem = function(locationId, body) {
    return this.createItemWithHttpInfo(locationId, body)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }


  /**
   * CreateModifierList
   * Creates an item modifier list and at least one modifier option for it.
   * @param {String} locationId The ID of the location to create a modifier list for.
   * @param {module:model/V1ModifierList} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/V1ModifierList} and HTTP response
   */
  this.createModifierListWithHttpInfo = function(locationId, body) {
    var postBody = body;

    // verify the required parameter 'locationId' is set
    if (locationId === undefined || locationId === null) {
      throw new Error("Missing the required parameter 'locationId' when calling createModifierList");
    }

    // verify the required parameter 'body' is set
    if (body === undefined || body === null) {
      throw new Error("Missing the required parameter 'body' when calling createModifierList");
    }


    var pathParams = {
      'location_id': locationId
    };
    var queryParams = {
    };
    var headerParams = {
    };
    headerParams['Square-Version'] = '2019-08-14';

    var formParams = {
    };

    var authNames = ['oauth2'];
    var contentTypes = ['application/json'];
    var accepts = ['application/json'];
    var returnType = V1ModifierList;

    return this.apiClient.callApi(
      '/v1/{location_id}/modifier-lists', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );
  }

  /**
   * CreateModifierList
   * Creates an item modifier list and at least one modifier option for it.
   * @param {String} locationId The ID of the location to create a modifier list for.
   * @param {module:model/V1ModifierList} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/V1ModifierList}
   */
  this.createModifierList = function(locationId, body) {
    return this.createModifierListWithHttpInfo(locationId, body)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }


  /**
   * CreateModifierOption
   * Creates an item modifier option and adds it to a modifier list.
   * @param {String} locationId The ID of the item&#39;s associated location.
   * @param {String} modifierListId The ID of the modifier list to edit.
   * @param {module:model/V1ModifierOption} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/V1ModifierOption} and HTTP response
   */
  this.createModifierOptionWithHttpInfo = function(locationId, modifierListId, body) {
    var postBody = body;

    // verify the required parameter 'locationId' is set
    if (locationId === undefined || locationId === null) {
      throw new Error("Missing the required parameter 'locationId' when calling createModifierOption");
    }

    // verify the required parameter 'modifierListId' is set
    if (modifierListId === undefined || modifierListId === null) {
      throw new Error("Missing the required parameter 'modifierListId' when calling createModifierOption");
    }

    // verify the required parameter 'body' is set
    if (body === undefined || body === null) {
      throw new Error("Missing the required parameter 'body' when calling createModifierOption");
    }


    var pathParams = {
      'location_id': locationId,
      'modifier_list_id': modifierListId
    };
    var queryParams = {
    };
    var headerParams = {
    };
    headerParams['Square-Version'] = '2019-08-14';

    var formParams = {
    };

    var authNames = ['oauth2'];
    var contentTypes = ['application/json'];
    var accepts = ['application/json'];
    var returnType = V1ModifierOption;

    return this.apiClient.callApi(
      '/v1/{location_id}/modifier-lists/{modifier_list_id}/modifier-options', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );
  }

  /**
   * CreateModifierOption
   * Creates an item modifier option and adds it to a modifier list.
   * @param {String} locationId The ID of the item&#39;s associated location.
   * @param {String} modifierListId The ID of the modifier list to edit.
   * @param {module:model/V1ModifierOption} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/V1ModifierOption}
   */
  this.createModifierOption = function(locationId, modifierListId, body) {
    return this.createModifierOptionWithHttpInfo(locationId, modifierListId, body)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }


  /**
   * CreatePage
   * Creates a Favorites page in Square Register.
   * @param {String} locationId The ID of the location to create an item for.
   * @param {module:model/V1Page} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/V1Page} and HTTP response
   */
  this.createPageWithHttpInfo = function(locationId, body) {
    var postBody = body;

    // verify the required parameter 'locationId' is set
    if (locationId === undefined || locationId === null) {
      throw new Error("Missing the required parameter 'locationId' when calling createPage");
    }

    // verify the required parameter 'body' is set
    if (body === undefined || body === null) {
      throw new Error("Missing the required parameter 'body' when calling createPage");
    }


    var pathParams = {
      'location_id': locationId
    };
    var queryParams = {
    };
    var headerParams = {
    };
    headerParams['Square-Version'] = '2019-08-14';

    var formParams = {
    };

    var authNames = ['oauth2'];
    var contentTypes = ['application/json'];
    var accepts = ['application/json'];
    var returnType = V1Page;

    return this.apiClient.callApi(
      '/v1/{location_id}/pages', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );
  }

  /**
   * CreatePage
   * Creates a Favorites page in Square Register.
   * @param {String} locationId The ID of the location to create an item for.
   * @param {module:model/V1Page} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/V1Page}
   */
  this.createPage = function(locationId, body) {
    return this.createPageWithHttpInfo(locationId, body)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }


  /**
   * CreateVariation
   * Creates an item variation for an existing item.
   * @param {String} locationId The ID of the item&#39;s associated location.
   * @param {String} itemId The item&#39;s ID.
   * @param {module:model/V1Variation} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/V1Variation} and HTTP response
   */
  this.createVariationWithHttpInfo = function(locationId, itemId, body) {
    var postBody = body;

    // verify the required parameter 'locationId' is set
    if (locationId === undefined || locationId === null) {
      throw new Error("Missing the required parameter 'locationId' when calling createVariation");
    }

    // verify the required parameter 'itemId' is set
    if (itemId === undefined || itemId === null) {
      throw new Error("Missing the required parameter 'itemId' when calling createVariation");
    }

    // verify the required parameter 'body' is set
    if (body === undefined || body === null) {
      throw new Error("Missing the required parameter 'body' when calling createVariation");
    }


    var pathParams = {
      'location_id': locationId,
      'item_id': itemId
    };
    var queryParams = {
    };
    var headerParams = {
    };
    headerParams['Square-Version'] = '2019-08-14';

    var formParams = {
    };

    var authNames = ['oauth2'];
    var contentTypes = ['application/json'];
    var accepts = ['application/json'];
    var returnType = V1Variation;

    return this.apiClient.callApi(
      '/v1/{location_id}/items/{item_id}/variations', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );
  }

  /**
   * CreateVariation
   * Creates an item variation for an existing item.
   * @param {String} locationId The ID of the item&#39;s associated location.
   * @param {String} itemId The item&#39;s ID.
   * @param {module:model/V1Variation} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/V1Variation}
   */
  this.createVariation = function(locationId, itemId, body) {
    return this.createVariationWithHttpInfo(locationId, itemId, body)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }


  /**
   * DeleteCategory
   * Deletes an existing item category. *Note**: DeleteCategory returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteCategoryRequest&#x60; object as documented below.
   * @param {String} locationId The ID of the item&#39;s associated location.
   * @param {String} categoryId The ID of the category to delete.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/V1Category} and HTTP response
   */
  this.deleteCategoryWithHttpInfo = function(locationId, categoryId) {
    var postBody = null;

    // verify the required parameter 'locationId' is set
    if (locationId === undefined || locationId === null) {
      throw new Error("Missing the required parameter 'locationId' when calling deleteCategory");
    }

    // verify the required parameter 'categoryId' is set
    if (categoryId === undefined || categoryId === null) {
      throw new Error("Missing the required parameter 'categoryId' when calling deleteCategory");
    }


    var pathParams = {
      'location_id': locationId,
      'category_id': categoryId
    };
    var queryParams = {
    };
    var headerParams = {
    };
    headerParams['Square-Version'] = '2019-08-14';

    var formParams = {
    };

    var authNames = ['oauth2'];
    var contentTypes = ['application/json'];
    var accepts = ['application/json'];
    var returnType = V1Category;

    return this.apiClient.callApi(
      '/v1/{location_id}/categories/{category_id}', 'DELETE',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );
  }

  /**
   * DeleteCategory
   * Deletes an existing item category. *Note**: DeleteCategory returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteCategoryRequest&#x60; object as documented below.
   * @param {String} locationId The ID of the item&#39;s associated location.
   * @param {String} categoryId The ID of the category to delete.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/V1Category}
   */
  this.deleteCategory = function(locationId, categoryId) {
    return this.deleteCategoryWithHttpInfo(locationId, categoryId)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }


  /**
   * DeleteDiscount
   * Deletes an existing discount. *Note**: DeleteDiscount returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteDiscountRequest&#x60; object as documented below.
   * @param {String} locationId The ID of the item&#39;s associated location.
   * @param {String} discountId The ID of the discount to delete.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/V1Discount} and HTTP response
   */
  this.deleteDiscountWithHttpInfo = function(locationId, discountId) {
    var postBody = null;

    // verify the required parameter 'locationId' is set
    if (locationId === undefined || locationId === null) {
      throw new Error("Missing the required parameter 'locationId' when calling deleteDiscount");
    }

    // verify the required parameter 'discountId' is set
    if (discountId === undefined || discountId === null) {
      throw new Error("Missing the required parameter 'discountId' when calling deleteDiscount");
    }


    var pathParams = {
      'location_id': locationId,
      'discount_id': discountId
    };
    var queryParams = {
    };
    var headerParams = {
    };
    headerParams['Square-Version'] = '2019-08-14';

    var formParams = {
    };

    var authNames = ['oauth2'];
    var contentTypes = ['application/json'];
    var accepts = ['application/json'];
    var returnType = V1Discount;

    return this.apiClient.callApi(
      '/v1/{location_id}/discounts/{discount_id}', 'DELETE',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );
  }

  /**
   * DeleteDiscount
   * Deletes an existing discount. *Note**: DeleteDiscount returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteDiscountRequest&#x60; object as documented below.
   * @param {String} locationId The ID of the item&#39;s associated location.
   * @param {String} discountId The ID of the discount to delete.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/V1Discount}
   */
  this.deleteDiscount = function(locationId, discountId) {
    return this.deleteDiscountWithHttpInfo(locationId, discountId)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }


  /**
   * DeleteFee
   * Deletes an existing fee (tax). *Note**: DeleteFee returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteFeeRequest&#x60; object as documented below.
   * @param {String} locationId The ID of the fee&#39;s associated location.
   * @param {String} feeId The ID of the fee to delete.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/V1Fee} and HTTP response
   */
  this.deleteFeeWithHttpInfo = function(locationId, feeId) {
    var postBody = null;

    // verify the required parameter 'locationId' is set
    if (locationId === undefined || locationId === null) {
      throw new Error("Missing the required parameter 'locationId' when calling deleteFee");
    }

    // verify the required parameter 'feeId' is set
    if (feeId === undefined || feeId === null) {
      throw new Error("Missing the required parameter 'feeId' when calling deleteFee");
    }


    var pathParams = {
      'location_id': locationId,
      'fee_id': feeId
    };
    var queryParams = {
    };
    var headerParams = {
    };
    headerParams['Square-Version'] = '2019-08-14';

    var formParams = {
    };

    var authNames = ['oauth2'];
    var contentTypes = ['application/json'];
    var accepts = ['application/json'];
    var returnType = V1Fee;

    return this.apiClient.callApi(
      '/v1/{location_id}/fees/{fee_id}', 'DELETE',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );
  }

  /**
   * DeleteFee
   * Deletes an existing fee (tax). *Note**: DeleteFee returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteFeeRequest&#x60; object as documented below.
   * @param {String} locationId The ID of the fee&#39;s associated location.
   * @param {String} feeId The ID of the fee to delete.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/V1Fee}
   */
  this.deleteFee = function(locationId, feeId) {
    return this.deleteFeeWithHttpInfo(locationId, feeId)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }


  /**
   * DeleteItem
   * Deletes an existing item and all item variations associated with it. *Note**: DeleteItem returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteItemRequest&#x60; object as documented below.
   * @param {String} locationId The ID of the item&#39;s associated location.
   * @param {String} itemId The ID of the item to modify.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/V1Item} and HTTP response
   */
  this.deleteItemWithHttpInfo = function(locationId, itemId) {
    var postBody = null;

    // verify the required parameter 'locationId' is set
    if (locationId === undefined || locationId === null) {
      throw new Error("Missing the required parameter 'locationId' when calling deleteItem");
    }

    // verify the required parameter 'itemId' is set
    if (itemId === undefined || itemId === null) {
      throw new Error("Missing the required parameter 'itemId' when calling deleteItem");
    }


    var pathParams = {
      'location_id': locationId,
      'item_id': itemId
    };
    var queryParams = {
    };
    var headerParams = {
    };
    headerParams['Square-Version'] = '2019-08-14';

    var formParams = {
    };

    var authNames = ['oauth2'];
    var contentTypes = ['application/json'];
    var accepts = ['application/json'];
    var returnType = V1Item;

    return this.apiClient.callApi(
      '/v1/{location_id}/items/{item_id}', 'DELETE',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );
  }

  /**
   * DeleteItem
   * Deletes an existing item and all item variations associated with it. *Note**: DeleteItem returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteItemRequest&#x60; object as documented below.
   * @param {String} locationId The ID of the item&#39;s associated location.
   * @param {String} itemId The ID of the item to modify.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/V1Item}
   */
  this.deleteItem = function(locationId, itemId) {
    return this.deleteItemWithHttpInfo(locationId, itemId)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }


  /**
   * DeleteModifierList
   * Deletes an existing item modifier list and all modifier options associated with it. *Note**: DeleteModifierList returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteModifierListRequest&#x60; object as documented below.
   * @param {String} locationId The ID of the item&#39;s associated location.
   * @param {String} modifierListId The ID of the modifier list to delete.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/V1ModifierList} and HTTP response
   */
  this.deleteModifierListWithHttpInfo = function(locationId, modifierListId) {
    var postBody = null;

    // verify the required parameter 'locationId' is set
    if (locationId === undefined || locationId === null) {
      throw new Error("Missing the required parameter 'locationId' when calling deleteModifierList");
    }

    // verify the required parameter 'modifierListId' is set
    if (modifierListId === undefined || modifierListId === null) {
      throw new Error("Missing the required parameter 'modifierListId' when calling deleteModifierList");
    }


    var pathParams = {
      'location_id': locationId,
      'modifier_list_id': modifierListId
    };
    var queryParams = {
    };
    var headerParams = {
    };
    headerParams['Square-Version'] = '2019-08-14';

    var formParams = {
    };

    var authNames = ['oauth2'];
    var contentTypes = ['application/json'];
    var accepts = ['application/json'];
    var returnType = V1ModifierList;

    return this.apiClient.callApi(
      '/v1/{location_id}/modifier-lists/{modifier_list_id}', 'DELETE',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );
  }

  /**
   * DeleteModifierList
   * Deletes an existing item modifier list and all modifier options associated with it. *Note**: DeleteModifierList returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteModifierListRequest&#x60; object as documented below.
   * @param {String} locationId The ID of the item&#39;s associated location.
   * @param {String} modifierListId The ID of the modifier list to delete.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/V1ModifierList}
   */
  this.deleteModifierList = function(locationId, modifierListId) {
    return this.deleteModifierListWithHttpInfo(locationId, modifierListId)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }


  /**
   * DeleteModifierOption
   * Deletes an existing item modifier option from a modifier list. *Note**: DeleteModifierOption returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteModifierOptionRequest&#x60; object as documented below.
   * @param {String} locationId The ID of the item&#39;s associated location.
   * @param {String} modifierListId The ID of the modifier list to delete.
   * @param {String} modifierOptionId The ID of the modifier list to edit.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/V1ModifierOption} and HTTP response
   */
  this.deleteModifierOptionWithHttpInfo = function(locationId, modifierListId, modifierOptionId) {
    var postBody = null;

    // verify the required parameter 'locationId' is set
    if (locationId === undefined || locationId === null) {
      throw new Error("Missing the required parameter 'locationId' when calling deleteModifierOption");
    }

    // verify the required parameter 'modifierListId' is set
    if (modifierListId === undefined || modifierListId === null) {
      throw new Error("Missing the required parameter 'modifierListId' when calling deleteModifierOption");
    }

    // verify the required parameter 'modifierOptionId' is set
    if (modifierOptionId === undefined || modifierOptionId === null) {
      throw new Error("Missing the required parameter 'modifierOptionId' when calling deleteModifierOption");
    }


    var pathParams = {
      'location_id': locationId,
      'modifier_list_id': modifierListId,
      'modifier_option_id': modifierOptionId
    };
    var queryParams = {
    };
    var headerParams = {
    };
    headerParams['Square-Version'] = '2019-08-14';

    var formParams = {
    };

    var authNames = ['oauth2'];
    var contentTypes = ['application/json'];
    var accepts = ['application/json'];
    var returnType = V1ModifierOption;

    return this.apiClient.callApi(
      '/v1/{location_id}/modifier-lists/{modifier_list_id}/modifier-options/{modifier_option_id}', 'DELETE',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );
  }

  /**
   * DeleteModifierOption
   * Deletes an existing item modifier option from a modifier list. *Note**: DeleteModifierOption returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteModifierOptionRequest&#x60; object as documented below.
   * @param {String} locationId The ID of the item&#39;s associated location.
   * @param {String} modifierListId The ID of the modifier list to delete.
   * @param {String} modifierOptionId The ID of the modifier list to edit.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/V1ModifierOption}
   */
  this.deleteModifierOption = function(locationId, modifierListId, modifierOptionId) {
    return this.deleteModifierOptionWithHttpInfo(locationId, modifierListId, modifierOptionId)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }


  /**
   * DeletePage
   * Deletes an existing Favorites page and all of its cells. *Note**: DeletePage returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeletePageRequest&#x60; object as documented below.
   * @param {String} locationId The ID of the Favorites page&#39;s associated location.
   * @param {String} pageId The ID of the page to delete.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/V1Page} and HTTP response
   */
  this.deletePageWithHttpInfo = function(locationId, pageId) {
    var postBody = null;

    // verify the required parameter 'locationId' is set
    if (locationId === undefined || locationId === null) {
      throw new Error("Missing the required parameter 'locationId' when calling deletePage");
    }

    // verify the required parameter 'pageId' is set
    if (pageId === undefined || pageId === null) {
      throw new Error("Missing the required parameter 'pageId' when calling deletePage");
    }


    var pathParams = {
      'location_id': locationId,
      'page_id': pageId
    };
    var queryParams = {
    };
    var headerParams = {
    };
    headerParams['Square-Version'] = '2019-08-14';

    var formParams = {
    };

    var authNames = ['oauth2'];
    var contentTypes = ['application/json'];
    var accepts = ['application/json'];
    var returnType = V1Page;

    return this.apiClient.callApi(
      '/v1/{location_id}/pages/{page_id}', 'DELETE',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );
  }

  /**
   * DeletePage
   * Deletes an existing Favorites page and all of its cells. *Note**: DeletePage returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeletePageRequest&#x60; object as documented below.
   * @param {String} locationId The ID of the Favorites page&#39;s associated location.
   * @param {String} pageId The ID of the page to delete.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/V1Page}
   */
  this.deletePage = function(locationId, pageId) {
    return this.deletePageWithHttpInfo(locationId, pageId)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }


  /**
   * DeletePageCell
   * Deletes a cell from a Favorites page in Square Register. *Note**: DeletePageCell returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeletePageCellRequest&#x60; object as documented below.
   * @param {String} locationId The ID of the Favorites page&#39;s associated location.
   * @param {String} pageId The ID of the page to delete.
   * @param {Object} opts Optional parameters
   * @param {String} opts.row The row of the cell to clear. Always an integer between 0 and 4, inclusive. Row 0 is the top row.
   * @param {String} opts.column The column of the cell to clear. Always an integer between 0 and 4, inclusive. Column 0 is the leftmost column.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/V1Page} and HTTP response
   */
  this.deletePageCellWithHttpInfo = function(locationId, pageId, opts) {
    opts = opts || {};
    var postBody = null;

    // verify the required parameter 'locationId' is set
    if (locationId === undefined || locationId === null) {
      throw new Error("Missing the required parameter 'locationId' when calling deletePageCell");
    }

    // verify the required parameter 'pageId' is set
    if (pageId === undefined || pageId === null) {
      throw new Error("Missing the required parameter 'pageId' when calling deletePageCell");
    }


    var pathParams = {
      'location_id': locationId,
      'page_id': pageId
    };
    var queryParams = {
      'row': opts['row'],
      'column': opts['column']
    };
    var headerParams = {
    };
    headerParams['Square-Version'] = '2019-08-14';

    var formParams = {
    };

    var authNames = ['oauth2'];
    var contentTypes = ['application/json'];
    var accepts = ['application/json'];
    var returnType = V1Page;

    return this.apiClient.callApi(
      '/v1/{location_id}/pages/{page_id}/cells', 'DELETE',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );
  }

  /**
   * DeletePageCell
   * Deletes a cell from a Favorites page in Square Register. *Note**: DeletePageCell returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeletePageCellRequest&#x60; object as documented below.
   * @param {String} locationId The ID of the Favorites page&#39;s associated location.
   * @param {String} pageId The ID of the page to delete.
   * @param {Object} opts Optional parameters
   * @param {String} opts.row The row of the cell to clear. Always an integer between 0 and 4, inclusive. Row 0 is the top row.
   * @param {String} opts.column The column of the cell to clear. Always an integer between 0 and 4, inclusive. Column 0 is the leftmost column.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/V1Page}
   */
  this.deletePageCell = function(locationId, pageId, opts) {
    return this.deletePageCellWithHttpInfo(locationId, pageId, opts)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }


  /**
   * DeleteVariation
   * Deletes an existing item variation from an item. *Note**: DeleteVariation returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteVariationRequest&#x60; object as documented below.
   * @param {String} locationId The ID of the item&#39;s associated location.
   * @param {String} itemId The ID of the item to delete.
   * @param {String} variationId The ID of the variation to delete.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/V1Variation} and HTTP response
   */
  this.deleteVariationWithHttpInfo = function(locationId, itemId, variationId) {
    var postBody = null;

    // verify the required parameter 'locationId' is set
    if (locationId === undefined || locationId === null) {
      throw new Error("Missing the required parameter 'locationId' when calling deleteVariation");
    }

    // verify the required parameter 'itemId' is set
    if (itemId === undefined || itemId === null) {
      throw new Error("Missing the required parameter 'itemId' when calling deleteVariation");
    }

    // verify the required parameter 'variationId' is set
    if (variationId === undefined || variationId === null) {
      throw new Error("Missing the required parameter 'variationId' when calling deleteVariation");
    }


    var pathParams = {
      'location_id': locationId,
      'item_id': itemId,
      'variation_id': variationId
    };
    var queryParams = {
    };
    var headerParams = {
    };
    headerParams['Square-Version'] = '2019-08-14';

    var formParams = {
    };

    var authNames = ['oauth2'];
    var contentTypes = ['application/json'];
    var accepts = ['application/json'];
    var returnType = V1Variation;

    return this.apiClient.callApi(
      '/v1/{location_id}/items/{item_id}/variations/{variation_id}', 'DELETE',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );
  }

  /**
   * DeleteVariation
   * Deletes an existing item variation from an item. *Note**: DeleteVariation returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteVariationRequest&#x60; object as documented below.
   * @param {String} locationId The ID of the item&#39;s associated location.
   * @param {String} itemId The ID of the item to delete.
   * @param {String} variationId The ID of the variation to delete.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/V1Variation}
   */
  this.deleteVariation = function(locationId, itemId, variationId) {
    return this.deleteVariationWithHttpInfo(locationId, itemId, variationId)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }


  /**
   * ListCategories
   * Lists all of a location&#39;s item categories.
   * @param {String} locationId The ID of the location to list categories for.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/V1Category>} and HTTP response
   */
  this.listCategoriesWithHttpInfo = function(locationId) {
    var postBody = null;

    // verify the required parameter 'locationId' is set
    if (locationId === undefined || locationId === null) {
      throw new Error("Missing the required parameter 'locationId' when calling listCategories");
    }


    var pathParams = {
      'location_id': locationId
    };
    var queryParams = {
    };
    var headerParams = {
    };
    headerParams['Square-Version'] = '2019-08-14';

    var formParams = {
    };

    var authNames = ['oauth2'];
    var contentTypes = ['application/json'];
    var accepts = ['application/json'];
    var returnType = [V1Category];

    return this.apiClient.callApi(
      '/v1/{location_id}/categories', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );
  }

  /**
   * ListCategories
   * Lists all of a location&#39;s item categories.
   * @param {String} locationId The ID of the location to list categories for.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/V1Category>}
   */
  this.listCategories = function(locationId) {
    return this.listCategoriesWithHttpInfo(locationId)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }


  /**
   * ListDiscounts
   * Lists all of a location&#39;s discounts.
   * @param {String} locationId The ID of the location to list categories for.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/V1Discount>} and HTTP response
   */
  this.listDiscountsWithHttpInfo = function(locationId) {
    var postBody = null;

    // verify the required parameter 'locationId' is set
    if (locationId === undefined || locationId === null) {
      throw new Error("Missing the required parameter 'locationId' when calling listDiscounts");
    }


    var pathParams = {
      'location_id': locationId
    };
    var queryParams = {
    };
    var headerParams = {
    };
    headerParams['Square-Version'] = '2019-08-14';

    var formParams = {
    };

    var authNames = ['oauth2'];
    var contentTypes = ['application/json'];
    var accepts = ['application/json'];
    var returnType = [V1Discount];

    return this.apiClient.callApi(
      '/v1/{location_id}/discounts', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );
  }

  /**
   * ListDiscounts
   * Lists all of a location&#39;s discounts.
   * @param {String} locationId The ID of the location to list categories for.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/V1Discount>}
   */
  this.listDiscounts = function(locationId) {
    return this.listDiscountsWithHttpInfo(locationId)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }


  /**
   * ListFees
   * Lists all of a location&#39;s fees (taxes).
   * @param {String} locationId The ID of the location to list fees for.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/V1Fee>} and HTTP response
   */
  this.listFeesWithHttpInfo = function(locationId) {
    var postBody = null;

    // verify the required parameter 'locationId' is set
    if (locationId === undefined || locationId === null) {
      throw new Error("Missing the required parameter 'locationId' when calling listFees");
    }


    var pathParams = {
      'location_id': locationId
    };
    var queryParams = {
    };
    var headerParams = {
    };
    headerParams['Square-Version'] = '2019-08-14';

    var formParams = {
    };

    var authNames = ['oauth2'];
    var contentTypes = ['application/json'];
    var accepts = ['application/json'];
    var returnType = [V1Fee];

    return this.apiClient.callApi(
      '/v1/{location_id}/fees', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );
  }

  /**
   * ListFees
   * Lists all of a location&#39;s fees (taxes).
   * @param {String} locationId The ID of the location to list fees for.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/V1Fee>}
   */
  this.listFees = function(locationId) {
    return this.listFeesWithHttpInfo(locationId)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }


  /**
   * ListInventory
   * Provides inventory information for all of a merchant&#39;s inventory-enabled item variations.
   * @param {String} locationId The ID of the item&#39;s associated location.
   * @param {Object} opts Optional parameters
   * @param {Number} opts.limit The maximum number of inventory entries to return in a single response. This value cannot exceed 1000.
   * @param {String} opts.batchToken A pagination cursor to retrieve the next set of results for your original query to the endpoint.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/V1InventoryEntry>} and HTTP response
   */
  this.listInventoryWithHttpInfo = function(locationId, opts) {
    opts = opts || {};
    var postBody = null;

    // verify the required parameter 'locationId' is set
    if (locationId === undefined || locationId === null) {
      throw new Error("Missing the required parameter 'locationId' when calling listInventory");
    }


    var pathParams = {
      'location_id': locationId
    };
    var queryParams = {
      'limit': opts['limit'],
      'batch_token': opts['batchToken']
    };
    var headerParams = {
    };
    headerParams['Square-Version'] = '2019-08-14';

    var formParams = {
    };

    var authNames = ['oauth2'];
    var contentTypes = ['application/json'];
    var accepts = ['application/json'];
    var returnType = [V1InventoryEntry];

    return this.apiClient.callApi(
      '/v1/{location_id}/inventory', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );
  }

  /**
   * ListInventory
   * Provides inventory information for all of a merchant&#39;s inventory-enabled item variations.
   * @param {String} locationId The ID of the item&#39;s associated location.
   * @param {Object} opts Optional parameters
   * @param {Number} opts.limit The maximum number of inventory entries to return in a single response. This value cannot exceed 1000.
   * @param {String} opts.batchToken A pagination cursor to retrieve the next set of results for your original query to the endpoint.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/V1InventoryEntry>}
   */
  this.listInventory = function(locationId, opts) {
    return this.listInventoryWithHttpInfo(locationId, opts)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }


  /**
   * ListItems
   * Provides summary information for all of a location&#39;s items.
   * @param {String} locationId The ID of the location to list items for.
   * @param {Object} opts Optional parameters
   * @param {String} opts.batchToken A pagination cursor to retrieve the next set of results for your original query to the endpoint.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/V1Item>} and HTTP response
   */
  this.listItemsWithHttpInfo = function(locationId, opts) {
    opts = opts || {};
    var postBody = null;

    // verify the required parameter 'locationId' is set
    if (locationId === undefined || locationId === null) {
      throw new Error("Missing the required parameter 'locationId' when calling listItems");
    }


    var pathParams = {
      'location_id': locationId
    };
    var queryParams = {
      'batch_token': opts['batchToken']
    };
    var headerParams = {
    };
    headerParams['Square-Version'] = '2019-08-14';

    var formParams = {
    };

    var authNames = ['oauth2'];
    var contentTypes = ['application/json'];
    var accepts = ['application/json'];
    var returnType = [V1Item];

    return this.apiClient.callApi(
      '/v1/{location_id}/items', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );
  }

  /**
   * ListItems
   * Provides summary information for all of a location&#39;s items.
   * @param {String} locationId The ID of the location to list items for.
   * @param {Object} opts Optional parameters
   * @param {String} opts.batchToken A pagination cursor to retrieve the next set of results for your original query to the endpoint.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/V1Item>}
   */
  this.listItems = function(locationId, opts) {
    return this.listItemsWithHttpInfo(locationId, opts)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }


  /**
   * ListModifierLists
   * Lists all of a location&#39;s modifier lists.
   * @param {String} locationId The ID of the location to list modifier lists for.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/V1ModifierList>} and HTTP response
   */
  this.listModifierListsWithHttpInfo = function(locationId) {
    var postBody = null;

    // verify the required parameter 'locationId' is set
    if (locationId === undefined || locationId === null) {
      throw new Error("Missing the required parameter 'locationId' when calling listModifierLists");
    }


    var pathParams = {
      'location_id': locationId
    };
    var queryParams = {
    };
    var headerParams = {
    };
    headerParams['Square-Version'] = '2019-08-14';

    var formParams = {
    };

    var authNames = ['oauth2'];
    var contentTypes = ['application/json'];
    var accepts = ['application/json'];
    var returnType = [V1ModifierList];

    return this.apiClient.callApi(
      '/v1/{location_id}/modifier-lists', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );
  }

  /**
   * ListModifierLists
   * Lists all of a location&#39;s modifier lists.
   * @param {String} locationId The ID of the location to list modifier lists for.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/V1ModifierList>}
   */
  this.listModifierLists = function(locationId) {
    return this.listModifierListsWithHttpInfo(locationId)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }


  /**
   * ListPages
   * Lists all of a location&#39;s Favorites pages in Square Register.
   * @param {String} locationId The ID of the location to list Favorites pages for.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/V1Page>} and HTTP response
   */
  this.listPagesWithHttpInfo = function(locationId) {
    var postBody = null;

    // verify the required parameter 'locationId' is set
    if (locationId === undefined || locationId === null) {
      throw new Error("Missing the required parameter 'locationId' when calling listPages");
    }


    var pathParams = {
      'location_id': locationId
    };
    var queryParams = {
    };
    var headerParams = {
    };
    headerParams['Square-Version'] = '2019-08-14';

    var formParams = {
    };

    var authNames = ['oauth2'];
    var contentTypes = ['application/json'];
    var accepts = ['application/json'];
    var returnType = [V1Page];

    return this.apiClient.callApi(
      '/v1/{location_id}/pages', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );
  }

  /**
   * ListPages
   * Lists all of a location&#39;s Favorites pages in Square Register.
   * @param {String} locationId The ID of the location to list Favorites pages for.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/V1Page>}
   */
  this.listPages = function(locationId) {
    return this.listPagesWithHttpInfo(locationId)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }


  /**
   * RemoveFee
   * Removes a fee assocation from an item, meaning the fee is no longer automatically applied to the item in Square Register.
   * @param {String} locationId The ID of the fee&#39;s associated location.
   * @param {String} itemId The ID of the item to add the fee to.
   * @param {String} feeId The ID of the fee to apply.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/V1Item} and HTTP response
   */
  this.removeFeeWithHttpInfo = function(locationId, itemId, feeId) {
    var postBody = null;

    // verify the required parameter 'locationId' is set
    if (locationId === undefined || locationId === null) {
      throw new Error("Missing the required parameter 'locationId' when calling removeFee");
    }

    // verify the required parameter 'itemId' is set
    if (itemId === undefined || itemId === null) {
      throw new Error("Missing the required parameter 'itemId' when calling removeFee");
    }

    // verify the required parameter 'feeId' is set
    if (feeId === undefined || feeId === null) {
      throw new Error("Missing the required parameter 'feeId' when calling removeFee");
    }


    var pathParams = {
      'location_id': locationId,
      'item_id': itemId,
      'fee_id': feeId
    };
    var queryParams = {
    };
    var headerParams = {
    };
    headerParams['Square-Version'] = '2019-08-14';

    var formParams = {
    };

    var authNames = ['oauth2'];
    var contentTypes = ['application/json'];
    var accepts = ['application/json'];
    var returnType = V1Item;

    return this.apiClient.callApi(
      '/v1/{location_id}/items/{item_id}/fees/{fee_id}', 'DELETE',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );
  }

  /**
   * RemoveFee
   * Removes a fee assocation from an item, meaning the fee is no longer automatically applied to the item in Square Register.
   * @param {String} locationId The ID of the fee&#39;s associated location.
   * @param {String} itemId The ID of the item to add the fee to.
   * @param {String} feeId The ID of the fee to apply.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/V1Item}
   */
  this.removeFee = function(locationId, itemId, feeId) {
    return this.removeFeeWithHttpInfo(locationId, itemId, feeId)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }


  /**
   * RemoveModifierList
   * Removes a modifier list association from an item, meaning modifier options from the list can no longer be applied to the item.
   * @param {String} locationId The ID of the item&#39;s associated location.
   * @param {String} modifierListId The ID of the modifier list to remove.
   * @param {String} itemId The ID of the item to remove the modifier list from.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/V1Item} and HTTP response
   */
  this.removeModifierListWithHttpInfo = function(locationId, modifierListId, itemId) {
    var postBody = null;

    // verify the required parameter 'locationId' is set
    if (locationId === undefined || locationId === null) {
      throw new Error("Missing the required parameter 'locationId' when calling removeModifierList");
    }

    // verify the required parameter 'modifierListId' is set
    if (modifierListId === undefined || modifierListId === null) {
      throw new Error("Missing the required parameter 'modifierListId' when calling removeModifierList");
    }

    // verify the required parameter 'itemId' is set
    if (itemId === undefined || itemId === null) {
      throw new Error("Missing the required parameter 'itemId' when calling removeModifierList");
    }


    var pathParams = {
      'location_id': locationId,
      'modifier_list_id': modifierListId,
      'item_id': itemId
    };
    var queryParams = {
    };
    var headerParams = {
    };
    headerParams['Square-Version'] = '2019-08-14';

    var formParams = {
    };

    var authNames = ['oauth2'];
    var contentTypes = ['application/json'];
    var accepts = ['application/json'];
    var returnType = V1Item;

    return this.apiClient.callApi(
      '/v1/{location_id}/items/{item_id}/modifier-lists/{modifier_list_id}', 'DELETE',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );
  }

  /**
   * RemoveModifierList
   * Removes a modifier list association from an item, meaning modifier options from the list can no longer be applied to the item.
   * @param {String} locationId The ID of the item&#39;s associated location.
   * @param {String} modifierListId The ID of the modifier list to remove.
   * @param {String} itemId The ID of the item to remove the modifier list from.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/V1Item}
   */
  this.removeModifierList = function(locationId, modifierListId, itemId) {
    return this.removeModifierListWithHttpInfo(locationId, modifierListId, itemId)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }


  /**
   * RetrieveItem
   * Provides the details for a single item, including associated modifier lists and fees.
   * @param {String} locationId The ID of the item&#39;s associated location.
   * @param {String} itemId The item&#39;s ID.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/V1Item} and HTTP response
   */
  this.retrieveItemWithHttpInfo = function(locationId, itemId) {
    var postBody = null;

    // verify the required parameter 'locationId' is set
    if (locationId === undefined || locationId === null) {
      throw new Error("Missing the required parameter 'locationId' when calling retrieveItem");
    }

    // verify the required parameter 'itemId' is set
    if (itemId === undefined || itemId === null) {
      throw new Error("Missing the required parameter 'itemId' when calling retrieveItem");
    }


    var pathParams = {
      'location_id': locationId,
      'item_id': itemId
    };
    var queryParams = {
    };
    var headerParams = {
    };
    headerParams['Square-Version'] = '2019-08-14';

    var formParams = {
    };

    var authNames = ['oauth2'];
    var contentTypes = ['application/json'];
    var accepts = ['application/json'];
    var returnType = V1Item;

    return this.apiClient.callApi(
      '/v1/{location_id}/items/{item_id}', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );
  }

  /**
   * RetrieveItem
   * Provides the details for a single item, including associated modifier lists and fees.
   * @param {String} locationId The ID of the item&#39;s associated location.
   * @param {String} itemId The item&#39;s ID.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/V1Item}
   */
  this.retrieveItem = function(locationId, itemId) {
    return this.retrieveItemWithHttpInfo(locationId, itemId)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }


  /**
   * RetrieveModifierList
   * Provides the details for a single modifier list.
   * @param {String} locationId The ID of the item&#39;s associated location.
   * @param {String} modifierListId The modifier list&#39;s ID.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/V1ModifierList} and HTTP response
   */
  this.retrieveModifierListWithHttpInfo = function(locationId, modifierListId) {
    var postBody = null;

    // verify the required parameter 'locationId' is set
    if (locationId === undefined || locationId === null) {
      throw new Error("Missing the required parameter 'locationId' when calling retrieveModifierList");
    }

    // verify the required parameter 'modifierListId' is set
    if (modifierListId === undefined || modifierListId === null) {
      throw new Error("Missing the required parameter 'modifierListId' when calling retrieveModifierList");
    }


    var pathParams = {
      'location_id': locationId,
      'modifier_list_id': modifierListId
    };
    var queryParams = {
    };
    var headerParams = {
    };
    headerParams['Square-Version'] = '2019-08-14';

    var formParams = {
    };

    var authNames = ['oauth2'];
    var contentTypes = ['application/json'];
    var accepts = ['application/json'];
    var returnType = V1ModifierList;

    return this.apiClient.callApi(
      '/v1/{location_id}/modifier-lists/{modifier_list_id}', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );
  }

  /**
   * RetrieveModifierList
   * Provides the details for a single modifier list.
   * @param {String} locationId The ID of the item&#39;s associated location.
   * @param {String} modifierListId The modifier list&#39;s ID.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/V1ModifierList}
   */
  this.retrieveModifierList = function(locationId, modifierListId) {
    return this.retrieveModifierListWithHttpInfo(locationId, modifierListId)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }


  /**
   * UpdateCategory
   * Modifies the details of an existing item category.
   * @param {String} locationId The ID of the category&#39;s associated location.
   * @param {String} categoryId The ID of the category to edit.
   * @param {module:model/V1Category} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/V1Category} and HTTP response
   */
  this.updateCategoryWithHttpInfo = function(locationId, categoryId, body) {
    var postBody = body;

    // verify the required parameter 'locationId' is set
    if (locationId === undefined || locationId === null) {
      throw new Error("Missing the required parameter 'locationId' when calling updateCategory");
    }

    // verify the required parameter 'categoryId' is set
    if (categoryId === undefined || categoryId === null) {
      throw new Error("Missing the required parameter 'categoryId' when calling updateCategory");
    }

    // verify the required parameter 'body' is set
    if (body === undefined || body === null) {
      throw new Error("Missing the required parameter 'body' when calling updateCategory");
    }


    var pathParams = {
      'location_id': locationId,
      'category_id': categoryId
    };
    var queryParams = {
    };
    var headerParams = {
    };
    headerParams['Square-Version'] = '2019-08-14';

    var formParams = {
    };

    var authNames = ['oauth2'];
    var contentTypes = ['application/json'];
    var accepts = ['application/json'];
    var returnType = V1Category;

    return this.apiClient.callApi(
      '/v1/{location_id}/categories/{category_id}', 'PUT',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );
  }

  /**
   * UpdateCategory
   * Modifies the details of an existing item category.
   * @param {String} locationId The ID of the category&#39;s associated location.
   * @param {String} categoryId The ID of the category to edit.
   * @param {module:model/V1Category} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/V1Category}
   */
  this.updateCategory = function(locationId, categoryId, body) {
    return this.updateCategoryWithHttpInfo(locationId, categoryId, body)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }


  /**
   * UpdateDiscount
   * Modifies the details of an existing discount.
   * @param {String} locationId The ID of the category&#39;s associated location.
   * @param {String} discountId The ID of the discount to edit.
   * @param {module:model/V1Discount} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/V1Discount} and HTTP response
   */
  this.updateDiscountWithHttpInfo = function(locationId, discountId, body) {
    var postBody = body;

    // verify the required parameter 'locationId' is set
    if (locationId === undefined || locationId === null) {
      throw new Error("Missing the required parameter 'locationId' when calling updateDiscount");
    }

    // verify the required parameter 'discountId' is set
    if (discountId === undefined || discountId === null) {
      throw new Error("Missing the required parameter 'discountId' when calling updateDiscount");
    }

    // verify the required parameter 'body' is set
    if (body === undefined || body === null) {
      throw new Error("Missing the required parameter 'body' when calling updateDiscount");
    }


    var pathParams = {
      'location_id': locationId,
      'discount_id': discountId
    };
    var queryParams = {
    };
    var headerParams = {
    };
    headerParams['Square-Version'] = '2019-08-14';

    var formParams = {
    };

    var authNames = ['oauth2'];
    var contentTypes = ['application/json'];
    var accepts = ['application/json'];
    var returnType = V1Discount;

    return this.apiClient.callApi(
      '/v1/{location_id}/discounts/{discount_id}', 'PUT',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );
  }

  /**
   * UpdateDiscount
   * Modifies the details of an existing discount.
   * @param {String} locationId The ID of the category&#39;s associated location.
   * @param {String} discountId The ID of the discount to edit.
   * @param {module:model/V1Discount} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/V1Discount}
   */
  this.updateDiscount = function(locationId, discountId, body) {
    return this.updateDiscountWithHttpInfo(locationId, discountId, body)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }


  /**
   * UpdateFee
   * Modifies the details of an existing fee (tax).
   * @param {String} locationId The ID of the fee&#39;s associated location.
   * @param {String} feeId The ID of the fee to edit.
   * @param {module:model/V1Fee} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/V1Fee} and HTTP response
   */
  this.updateFeeWithHttpInfo = function(locationId, feeId, body) {
    var postBody = body;

    // verify the required parameter 'locationId' is set
    if (locationId === undefined || locationId === null) {
      throw new Error("Missing the required parameter 'locationId' when calling updateFee");
    }

    // verify the required parameter 'feeId' is set
    if (feeId === undefined || feeId === null) {
      throw new Error("Missing the required parameter 'feeId' when calling updateFee");
    }

    // verify the required parameter 'body' is set
    if (body === undefined || body === null) {
      throw new Error("Missing the required parameter 'body' when calling updateFee");
    }


    var pathParams = {
      'location_id': locationId,
      'fee_id': feeId
    };
    var queryParams = {
    };
    var headerParams = {
    };
    headerParams['Square-Version'] = '2019-08-14';

    var formParams = {
    };

    var authNames = ['oauth2'];
    var contentTypes = ['application/json'];
    var accepts = ['application/json'];
    var returnType = V1Fee;

    return this.apiClient.callApi(
      '/v1/{location_id}/fees/{fee_id}', 'PUT',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );
  }

  /**
   * UpdateFee
   * Modifies the details of an existing fee (tax).
   * @param {String} locationId The ID of the fee&#39;s associated location.
   * @param {String} feeId The ID of the fee to edit.
   * @param {module:model/V1Fee} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/V1Fee}
   */
  this.updateFee = function(locationId, feeId, body) {
    return this.updateFeeWithHttpInfo(locationId, feeId, body)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }


  /**
   * UpdateItem
   * Modifies the core details of an existing item.
   * @param {String} locationId The ID of the item&#39;s associated location.
   * @param {String} itemId The ID of the item to modify.
   * @param {module:model/V1Item} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/V1Item} and HTTP response
   */
  this.updateItemWithHttpInfo = function(locationId, itemId, body) {
    var postBody = body;

    // verify the required parameter 'locationId' is set
    if (locationId === undefined || locationId === null) {
      throw new Error("Missing the required parameter 'locationId' when calling updateItem");
    }

    // verify the required parameter 'itemId' is set
    if (itemId === undefined || itemId === null) {
      throw new Error("Missing the required parameter 'itemId' when calling updateItem");
    }

    // verify the required parameter 'body' is set
    if (body === undefined || body === null) {
      throw new Error("Missing the required parameter 'body' when calling updateItem");
    }


    var pathParams = {
      'location_id': locationId,
      'item_id': itemId
    };
    var queryParams = {
    };
    var headerParams = {
    };
    headerParams['Square-Version'] = '2019-08-14';

    var formParams = {
    };

    var authNames = ['oauth2'];
    var contentTypes = ['application/json'];
    var accepts = ['application/json'];
    var returnType = V1Item;

    return this.apiClient.callApi(
      '/v1/{location_id}/items/{item_id}', 'PUT',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );
  }

  /**
   * UpdateItem
   * Modifies the core details of an existing item.
   * @param {String} locationId The ID of the item&#39;s associated location.
   * @param {String} itemId The ID of the item to modify.
   * @param {module:model/V1Item} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/V1Item}
   */
  this.updateItem = function(locationId, itemId, body) {
    return this.updateItemWithHttpInfo(locationId, itemId, body)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }


  /**
   * UpdateModifierList
   * Modifies the details of an existing item modifier list.
   * @param {String} locationId The ID of the item&#39;s associated location.
   * @param {String} modifierListId The ID of the modifier list to edit.
   * @param {module:model/V1UpdateModifierListRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/V1ModifierList} and HTTP response
   */
  this.updateModifierListWithHttpInfo = function(locationId, modifierListId, body) {
    var postBody = body;

    // verify the required parameter 'locationId' is set
    if (locationId === undefined || locationId === null) {
      throw new Error("Missing the required parameter 'locationId' when calling updateModifierList");
    }

    // verify the required parameter 'modifierListId' is set
    if (modifierListId === undefined || modifierListId === null) {
      throw new Error("Missing the required parameter 'modifierListId' when calling updateModifierList");
    }

    // verify the required parameter 'body' is set
    if (body === undefined || body === null) {
      throw new Error("Missing the required parameter 'body' when calling updateModifierList");
    }


    var pathParams = {
      'location_id': locationId,
      'modifier_list_id': modifierListId
    };
    var queryParams = {
    };
    var headerParams = {
    };
    headerParams['Square-Version'] = '2019-08-14';

    var formParams = {
    };

    var authNames = ['oauth2'];
    var contentTypes = ['application/json'];
    var accepts = ['application/json'];
    var returnType = V1ModifierList;

    return this.apiClient.callApi(
      '/v1/{location_id}/modifier-lists/{modifier_list_id}', 'PUT',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );
  }

  /**
   * UpdateModifierList
   * Modifies the details of an existing item modifier list.
   * @param {String} locationId The ID of the item&#39;s associated location.
   * @param {String} modifierListId The ID of the modifier list to edit.
   * @param {module:model/V1UpdateModifierListRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/V1ModifierList}
   */
  this.updateModifierList = function(locationId, modifierListId, body) {
    return this.updateModifierListWithHttpInfo(locationId, modifierListId, body)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }


  /**
   * UpdateModifierOption
   * Modifies the details of an existing item modifier option.
   * @param {String} locationId The ID of the item&#39;s associated location.
   * @param {String} modifierListId The ID of the modifier list to edit.
   * @param {String} modifierOptionId The ID of the modifier list to edit.
   * @param {module:model/V1ModifierOption} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/V1ModifierOption} and HTTP response
   */
  this.updateModifierOptionWithHttpInfo = function(locationId, modifierListId, modifierOptionId, body) {
    var postBody = body;

    // verify the required parameter 'locationId' is set
    if (locationId === undefined || locationId === null) {
      throw new Error("Missing the required parameter 'locationId' when calling updateModifierOption");
    }

    // verify the required parameter 'modifierListId' is set
    if (modifierListId === undefined || modifierListId === null) {
      throw new Error("Missing the required parameter 'modifierListId' when calling updateModifierOption");
    }

    // verify the required parameter 'modifierOptionId' is set
    if (modifierOptionId === undefined || modifierOptionId === null) {
      throw new Error("Missing the required parameter 'modifierOptionId' when calling updateModifierOption");
    }

    // verify the required parameter 'body' is set
    if (body === undefined || body === null) {
      throw new Error("Missing the required parameter 'body' when calling updateModifierOption");
    }


    var pathParams = {
      'location_id': locationId,
      'modifier_list_id': modifierListId,
      'modifier_option_id': modifierOptionId
    };
    var queryParams = {
    };
    var headerParams = {
    };
    headerParams['Square-Version'] = '2019-08-14';

    var formParams = {
    };

    var authNames = ['oauth2'];
    var contentTypes = ['application/json'];
    var accepts = ['application/json'];
    var returnType = V1ModifierOption;

    return this.apiClient.callApi(
      '/v1/{location_id}/modifier-lists/{modifier_list_id}/modifier-options/{modifier_option_id}', 'PUT',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );
  }

  /**
   * UpdateModifierOption
   * Modifies the details of an existing item modifier option.
   * @param {String} locationId The ID of the item&#39;s associated location.
   * @param {String} modifierListId The ID of the modifier list to edit.
   * @param {String} modifierOptionId The ID of the modifier list to edit.
   * @param {module:model/V1ModifierOption} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/V1ModifierOption}
   */
  this.updateModifierOption = function(locationId, modifierListId, modifierOptionId, body) {
    return this.updateModifierOptionWithHttpInfo(locationId, modifierListId, modifierOptionId, body)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }


  /**
   * UpdatePage
   * Modifies the details of a Favorites page in Square Register.
   * @param {String} locationId The ID of the Favorites page&#39;s associated location
   * @param {String} pageId The ID of the page to modify.
   * @param {module:model/V1Page} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/V1Page} and HTTP response
   */
  this.updatePageWithHttpInfo = function(locationId, pageId, body) {
    var postBody = body;

    // verify the required parameter 'locationId' is set
    if (locationId === undefined || locationId === null) {
      throw new Error("Missing the required parameter 'locationId' when calling updatePage");
    }

    // verify the required parameter 'pageId' is set
    if (pageId === undefined || pageId === null) {
      throw new Error("Missing the required parameter 'pageId' when calling updatePage");
    }

    // verify the required parameter 'body' is set
    if (body === undefined || body === null) {
      throw new Error("Missing the required parameter 'body' when calling updatePage");
    }


    var pathParams = {
      'location_id': locationId,
      'page_id': pageId
    };
    var queryParams = {
    };
    var headerParams = {
    };
    headerParams['Square-Version'] = '2019-08-14';

    var formParams = {
    };

    var authNames = ['oauth2'];
    var contentTypes = ['application/json'];
    var accepts = ['application/json'];
    var returnType = V1Page;

    return this.apiClient.callApi(
      '/v1/{location_id}/pages/{page_id}', 'PUT',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );
  }

  /**
   * UpdatePage
   * Modifies the details of a Favorites page in Square Register.
   * @param {String} locationId The ID of the Favorites page&#39;s associated location
   * @param {String} pageId The ID of the page to modify.
   * @param {module:model/V1Page} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/V1Page}
   */
  this.updatePage = function(locationId, pageId, body) {
    return this.updatePageWithHttpInfo(locationId, pageId, body)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }


  /**
   * UpdatePageCell
   * Modifies a cell of a Favorites page in Square Register.
   * @param {String} locationId The ID of the Favorites page&#39;s associated location.
   * @param {String} pageId The ID of the page the cell belongs to.
   * @param {module:model/V1PageCell} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/V1Page} and HTTP response
   */
  this.updatePageCellWithHttpInfo = function(locationId, pageId, body) {
    var postBody = body;

    // verify the required parameter 'locationId' is set
    if (locationId === undefined || locationId === null) {
      throw new Error("Missing the required parameter 'locationId' when calling updatePageCell");
    }

    // verify the required parameter 'pageId' is set
    if (pageId === undefined || pageId === null) {
      throw new Error("Missing the required parameter 'pageId' when calling updatePageCell");
    }

    // verify the required parameter 'body' is set
    if (body === undefined || body === null) {
      throw new Error("Missing the required parameter 'body' when calling updatePageCell");
    }


    var pathParams = {
      'location_id': locationId,
      'page_id': pageId
    };
    var queryParams = {
    };
    var headerParams = {
    };
    headerParams['Square-Version'] = '2019-08-14';

    var formParams = {
    };

    var authNames = ['oauth2'];
    var contentTypes = ['application/json'];
    var accepts = ['application/json'];
    var returnType = V1Page;

    return this.apiClient.callApi(
      '/v1/{location_id}/pages/{page_id}/cells', 'PUT',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );
  }

  /**
   * UpdatePageCell
   * Modifies a cell of a Favorites page in Square Register.
   * @param {String} locationId The ID of the Favorites page&#39;s associated location.
   * @param {String} pageId The ID of the page the cell belongs to.
   * @param {module:model/V1PageCell} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/V1Page}
   */
  this.updatePageCell = function(locationId, pageId, body) {
    return this.updatePageCellWithHttpInfo(locationId, pageId, body)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }


  /**
   * UpdateVariation
   * Modifies the details of an existing item variation.
   * @param {String} locationId The ID of the item&#39;s associated location.
   * @param {String} itemId The ID of the item to modify.
   * @param {String} variationId The ID of the variation to modify.
   * @param {module:model/V1Variation} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/V1Variation} and HTTP response
   */
  this.updateVariationWithHttpInfo = function(locationId, itemId, variationId, body) {
    var postBody = body;

    // verify the required parameter 'locationId' is set
    if (locationId === undefined || locationId === null) {
      throw new Error("Missing the required parameter 'locationId' when calling updateVariation");
    }

    // verify the required parameter 'itemId' is set
    if (itemId === undefined || itemId === null) {
      throw new Error("Missing the required parameter 'itemId' when calling updateVariation");
    }

    // verify the required parameter 'variationId' is set
    if (variationId === undefined || variationId === null) {
      throw new Error("Missing the required parameter 'variationId' when calling updateVariation");
    }

    // verify the required parameter 'body' is set
    if (body === undefined || body === null) {
      throw new Error("Missing the required parameter 'body' when calling updateVariation");
    }


    var pathParams = {
      'location_id': locationId,
      'item_id': itemId,
      'variation_id': variationId
    };
    var queryParams = {
    };
    var headerParams = {
    };
    headerParams['Square-Version'] = '2019-08-14';

    var formParams = {
    };

    var authNames = ['oauth2'];
    var contentTypes = ['application/json'];
    var accepts = ['application/json'];
    var returnType = V1Variation;

    return this.apiClient.callApi(
      '/v1/{location_id}/items/{item_id}/variations/{variation_id}', 'PUT',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );
  }

  /**
   * UpdateVariation
   * Modifies the details of an existing item variation.
   * @param {String} locationId The ID of the item&#39;s associated location.
   * @param {String} itemId The ID of the item to modify.
   * @param {String} variationId The ID of the variation to modify.
   * @param {module:model/V1Variation} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/V1Variation}
   */
  this.updateVariation = function(locationId, itemId, variationId, body) {
    return this.updateVariationWithHttpInfo(locationId, itemId, variationId, body)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }
};
